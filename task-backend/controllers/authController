const User = require("../models/User");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const Task = require("../models/Task");

exports.register = async (req, res) => {
  try {
    const { email, password, recaptchaToken } = req.body;

    if (process.env.NODE_ENV !== "test") {
      const response = await fetch(
        `https://www.google.com/recaptcha/api/siteverify?secret=${process.env.RECAPTCHA_SECRET_KEY}&response=${recaptchaToken}`,
        { method: "POST" }
      );
      const data = await response.json();
      if (!data.success) {
        return res
          .status(400)
          .json({ error: "La verificación de reCAPTCHA falló." });
      }
    }

    const existing = await User.findOne({ email });
    if (existing) {
      return res.status(400).json({ error: "El email ya está registrado." });
    }

    const hashed = await bcrypt.hash(password, 10);
    const user = new User({ email, password: hashed });
    await user.save();

    res.status(201).json({ message: "Usuario registrado correctamente." });
  } catch (err) {
    console.error("❌ Error en registro:", err);
    res.status(500).json({ error: "Error al registrar usuario." });
  }
};

exports.login = async (req, res) => {
  try {
    const { email, password } = req.body;

    if (!email || !password) {
      return res
        .status(400)
        .json({ error: "Email y contraseña son requeridos." });
    }

    const user = await User.findOne({ email });
    if (!user) {
      return res.status(400).json({ error: "Credenciales inválidas." });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ error: "Credenciales inválidas." });
    }

    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, {
      expiresIn: "7d",
    });

    res.json({ token });
  } catch (err) {
    console.error("❌ Error en login:", err);
    res.status(500).json({ error: "Error al iniciar sesión." });
  }
};

exports.getProfile = async (req, res) => {
  try {
    const user = await User.findById(req.user.userId);
    if (!user) {
      return res.status(404).json({ error: "Usuario no encontrado." });
    }
    res.json({ email: user.email });
  } catch (err) {
    console.error("❌ Error al obtener perfil:", err);
    res.status(500).json({ error: "Error al obtener perfil." });
  }
};

exports.deleteAccount = async (req, res) => {
  try {
    const { password, confirmText } = req.body;

    if (confirmText !== "QUIERO ELIMINAR MI CUENTA") {
      return res.status(400).json({ error: "La confirmación no coincide." });
    }

    const user = await User.findById(req.user.userId);
    if (!user) {
      return res.status(404).json({ error: "Usuario no encontrado." });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ error: "Contraseña incorrecta." });
    }

    // Eliminar todas las tareas del usuario
    await Task.deleteMany({ user: req.user.userId });

    // Eliminar usuario
    await User.findByIdAndDelete(req.user.userId);

    res.json({ message: "Cuenta y datos eliminados correctamente." });
  } catch (err) {
    console.error("❌ Error al borrar cuenta:", err);
    res.status(500).json({ error: "Error al eliminar cuenta." });
  }
};
